<?xml version='1.0' encoding='UTF-8'?>
<testsuite hostname="Brunos-MBP" name="forcomp.AnagramsSuite" tests="11" errors="0" failures="1" skipped="0" time="0.645" timestamp="2020-03-01T22:47:11">
                     <properties>
      <property name="jline.esc.timeout" value="0"/><property name="jna.platform.library.path" value="/usr/lib:/usr/lib"/><property name="java.runtime.name" value="OpenJDK Runtime Environment"/><property name="sun.boot.library.path" value="/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/lib"/><property name="java.vm.version" value="25.212-b03"/><property name="gopherProxySet" value="false"/><property name="java.vm.vendor" value="AdoptOpenJDK"/><property name="java.vendor.url" value="http://java.oracle.com/"/><property name="path.separator" value=":"/><property name="jna.loaded" value="true"/><property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/><property name="file.encoding.pkg" value="sun.io"/><property name="user.country" value="CA"/><property name="sun.java.launcher" value="SUN_STANDARD"/><property name="sun.os.patch.level" value="unknown"/><property name="jna.nosys" value="true"/><property name="java.vm.specification.name" value="Java Virtual Machine Specification"/><property name="user.dir" value="/Users/brodrigues/IdeaProjects/coursera-scala/forcomp"/><property name="java.runtime.version" value="1.8.0_212-b03"/><property name="java.awt.graphicsenv" value="sun.awt.CGraphicsEnvironment"/><property name="java.endorsed.dirs" value="/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/lib/endorsed"/><property name="os.arch" value="x86_64"/><property name="java.io.tmpdir" value="/var/folders/hx/kzkt_3yx5dx8wqh1m9dbtyxm0000gn/T/"/><property name="line.separator" value="
"/><property name="java.vm.specification.vendor" value="Oracle Corporation"/><property name="os.name" value="Mac OS X"/><property name="sun.jnu.encoding" value="UTF-8"/><property name="jnidispatch.path" value="/var/folders/hx/kzkt_3yx5dx8wqh1m9dbtyxm0000gn/T/jna-128517944/jna1868222553042613800.tmp"/><property name="java.library.path" value="/Users/brodrigues/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/><property name="java.specification.name" value="Java Platform API Specification"/><property name="java.class.version" value="52.0"/><property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/><property name="os.version" value="10.15.1"/><property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/><property name="user.home" value="/Users/brodrigues"/><property name="user.timezone" value="America/Montreal"/><property name="java.awt.printerjob" value="sun.lwawt.macosx.CPrinterJob"/><property name="file.encoding" value="UTF-8"/><property name="java.specification.version" value="1.8"/><property name="java.class.path" value="/usr/local/Cellar/sbt/1.2.8/libexec/bin/sbt-launch.jar"/><property name="user.name" value="brodrigues"/><property name="jline.shutdownhook" value="false"/><property name="java.vm.specification.version" value="1.8"/><property name="sun.java.command" value="/usr/local/Cellar/sbt/1.2.8/libexec/bin/sbt-launch.jar test"/><property name="java.home" value="/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre"/><property name="sun.arch.data.model" value="64"/><property name="user.language" value="en"/><property name="java.specification.vendor" value="Oracle Corporation"/><property name="awt.toolkit" value="sun.lwawt.macosx.LWCToolkit"/><property name="java.vm.info" value="mixed mode"/><property name="java.version" value="1.8.0_212"/><property name="java.ext.dirs" value="/Users/brodrigues/Library/Java/Extensions:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/lib/ext:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java"/><property name="sun.boot.class.path" value="/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/jre/classes"/><property name="java.vendor" value="AdoptOpenJDK"/><property name="file.separator" value="/"/><property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/><property name="sun.io.unicode.encoding" value="UnicodeBig"/><property name="sun.cpu.endian" value="little"/><property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/><property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/><property name="sun.cpu.isalist" value=""/>
    </properties>
                     <testcase classname="forcomp.AnagramsSuite" name="get: eat (10pts)" time="0.551">
                                                 
                                               </testcase><testcase classname="forcomp.AnagramsSuite" name="sentenceOccurrences: abcd e (5pts)" time="0.001">
                                                 
                                               </testcase><testcase classname="forcomp.AnagramsSuite" name="wordAnagrams player (2pts)" time="0.003">
                                                 
                                               </testcase><testcase classname="forcomp.AnagramsSuite" name="combinations: [] (8pts)" time="0.001">
                                                 
                                               </testcase><testcase classname="forcomp.AnagramsSuite" name="sentence anagrams: Linux rulez (10pts)" time="0.085">
                                                 <failure message="java.lang.AssertionError: expected:&lt;HashSet(List(Zulu, nil, Rex), List(Rex, Uzi, null), List(rulez, Linux), List(Zulu, Rex, Lin), List(Zulu, Rex, nil), List(Rex, Lin, Zulu), List(Rex, Zulu, nil), List(Lin, Zulu, Rex), List(null, Uzi, Rex), List(Zulu, Lin, Rex), List(Linux, rulez), List(Uzi, null, Rex), List(Uzi, Rex, null), List(Lin, Rex, Zulu), List(nil, Rex, Zulu), List(nil, Zulu, Rex), List(null, Rex, Uzi), List(Rex, Zulu, Lin), List(Rex, nil, Zulu), List(Rex, null, Uzi))&gt; but was:&lt;HashSet(List(rue, nu, ill, Liz, null, ill, nu, in, Uzi, Unix, Lin, nil, Liz, nu, Linux), List(Linux, re, rue, lure, rule, rulez), List(ex, nu, ill, Uzi, Uri, Liz, rill, run, urn, ill, Uzi, Liz, Zulu, in, Lin, nil, null, Uzi, Uri, ill, nu, run, urn, in, Zulu, Uzi, nu, run, urn, null, Uri, nu, null, ruin, Lin, nil, Zulu, Liz, nu, run, urn, rill, nu), List(en, Zulu, ill, Uzi, Uri, Liz, rill), List(null, Uzi, re, ex, Rex, Uri, ex, re, Uzi, ex, Uzi, Uri, rue, Rex, Uzi, ire), List(Uri, nu, ex, null, ex, en, ex, nu, null, Zen, Len, Nell), List(ire, nu, Zulu, null), List(ruin, ex), List(Uzi, nu, re, ex, Rex, run, urn, ex, null, re, ex, Rex, en, re, nu, null, ex, nu, run, urn, null, rue, Rex, nu, null, Len, lure, rule, Nell), List(Rex, nu, ill, Uzi, Liz, Zulu, in, Lin, nil, null, Uzi, ill, nu, in, Zulu, Uzi, nu, null, Lin, nil, Zulu, Liz, nu), List(rein, Zulu), List(nu, ill, re, ex, rue, Rex, Uzi, re, ex, Rex, Uri, ex, Liz, re, ex, rue, Rex, lure, rule, rill, ex, re, ill, Uzi, Liz, ex, ill, Uzi, Uri, Liz, rill, rue, ill, Liz, Rex, ill, Uzi, Liz, lure, rule, Liz, rulez, Eli, lie, ire, lieu), List(liner, Zulu), List(lien, line, Neil, Nile, Zulu), List(lieu, nu, run, urn), List(run, urn, ill, ex, Uzi, ex, Liz, ex, ex, ill, Uzi, Liz, Eli, lie, lieu), List(Zen, ill, Uri, rill), List(rulez, nu, in, Unix, Lin, nil, Linux), List(rill, nu, ex, en, ex, nu, Zen), List(Unix, re, rue, lure, rule, rulez), List(Len, Zulu, Uzi, Uri, Liz), List(), List(Eli, lie, nu, run, urn, Zulu), List(Liz, nu, re, ex, rue, Rex, lure, rule, run, urn, ex, en, re, nu, ex, nu, run, urn, rue, nu, Rex, nu, Len, lure, rule, nu), List(ill, nu, re, ex, rue, Rex, run, urn, ex, en, re, nu, ex, nu, run, urn, rue, nu, Rex, nu, Zen), List(Nell, Uzi, Uri), List(Lin, nil, Zulu, re, ex, Rex, re, Zulu, ex, Zulu, rue, Rex, Zulu, lure, rule, rulez), List(urine), List(re, nu, ill, Uzi, Liz, Zulu, in, Lin, nil, null, Uzi, ill, nu, in, Zulu, Uzi, nu, null, Unix, Lin, nil, Zulu, Liz, nu, Linux), List(lure, rule, nu, Liz, in, Uzi, Unix, Lin, nil, Liz, nu, Linux), List(Zulu, in, re, ex, Rex, Lin, nil, re, ex, Rex, en, re, in, Lin, nil, ex, in, Lin, nil, Rex, in, Lin, nil, Len, Eli, lie, ire, rein, lien, line, Neil, Nile, liner), List(in, Zulu, re, ex, Rex, re, Zulu, ex, Zulu, rue, Rex, Zulu, lure, rule, rulez))&gt;" type="sbt.ForkMain$ForkError">sbt.ForkMain$ForkError: java.lang.AssertionError: expected:&lt;HashSet(List(Zulu, nil, Rex), List(Rex, Uzi, null), List(rulez, Linux), List(Zulu, Rex, Lin), List(Zulu, Rex, nil), List(Rex, Lin, Zulu), List(Rex, Zulu, nil), List(Lin, Zulu, Rex), List(null, Uzi, Rex), List(Zulu, Lin, Rex), List(Linux, rulez), List(Uzi, null, Rex), List(Uzi, Rex, null), List(Lin, Rex, Zulu), List(nil, Rex, Zulu), List(nil, Zulu, Rex), List(null, Rex, Uzi), List(Rex, Zulu, Lin), List(Rex, nil, Zulu), List(Rex, null, Uzi))&gt; but was:&lt;HashSet(List(rue, nu, ill, Liz, null, ill, nu, in, Uzi, Unix, Lin, nil, Liz, nu, Linux), List(Linux, re, rue, lure, rule, rulez), List(ex, nu, ill, Uzi, Uri, Liz, rill, run, urn, ill, Uzi, Liz, Zulu, in, Lin, nil, null, Uzi, Uri, ill, nu, run, urn, in, Zulu, Uzi, nu, run, urn, null, Uri, nu, null, ruin, Lin, nil, Zulu, Liz, nu, run, urn, rill, nu), List(en, Zulu, ill, Uzi, Uri, Liz, rill), List(null, Uzi, re, ex, Rex, Uri, ex, re, Uzi, ex, Uzi, Uri, rue, Rex, Uzi, ire), List(Uri, nu, ex, null, ex, en, ex, nu, null, Zen, Len, Nell), List(ire, nu, Zulu, null), List(ruin, ex), List(Uzi, nu, re, ex, Rex, run, urn, ex, null, re, ex, Rex, en, re, nu, null, ex, nu, run, urn, null, rue, Rex, nu, null, Len, lure, rule, Nell), List(Rex, nu, ill, Uzi, Liz, Zulu, in, Lin, nil, null, Uzi, ill, nu, in, Zulu, Uzi, nu, null, Lin, nil, Zulu, Liz, nu), List(rein, Zulu), List(nu, ill, re, ex, rue, Rex, Uzi, re, ex, Rex, Uri, ex, Liz, re, ex, rue, Rex, lure, rule, rill, ex, re, ill, Uzi, Liz, ex, ill, Uzi, Uri, Liz, rill, rue, ill, Liz, Rex, ill, Uzi, Liz, lure, rule, Liz, rulez, Eli, lie, ire, lieu), List(liner, Zulu), List(lien, line, Neil, Nile, Zulu), List(lieu, nu, run, urn), List(run, urn, ill, ex, Uzi, ex, Liz, ex, ex, ill, Uzi, Liz, Eli, lie, lieu), List(Zen, ill, Uri, rill), List(rulez, nu, in, Unix, Lin, nil, Linux), List(rill, nu, ex, en, ex, nu, Zen), List(Unix, re, rue, lure, rule, rulez), List(Len, Zulu, Uzi, Uri, Liz), List(), List(Eli, lie, nu, run, urn, Zulu), List(Liz, nu, re, ex, rue, Rex, lure, rule, run, urn, ex, en, re, nu, ex, nu, run, urn, rue, nu, Rex, nu, Len, lure, rule, nu), List(ill, nu, re, ex, rue, Rex, run, urn, ex, en, re, nu, ex, nu, run, urn, rue, nu, Rex, nu, Zen), List(Nell, Uzi, Uri), List(Lin, nil, Zulu, re, ex, Rex, re, Zulu, ex, Zulu, rue, Rex, Zulu, lure, rule, rulez), List(urine), List(re, nu, ill, Uzi, Liz, Zulu, in, Lin, nil, null, Uzi, ill, nu, in, Zulu, Uzi, nu, null, Unix, Lin, nil, Zulu, Liz, nu, Linux), List(lure, rule, nu, Liz, in, Uzi, Unix, Lin, nil, Liz, nu, Linux), List(Zulu, in, re, ex, Rex, Lin, nil, re, ex, Rex, en, re, in, Lin, nil, ex, in, Lin, nil, Rex, in, Lin, nil, Len, Eli, lie, ire, rein, lien, line, Neil, Nile, liner), List(in, Zulu, re, ex, Rex, re, Zulu, ex, Zulu, rue, Rex, Zulu, lure, rule, rulez))&gt;
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:743)
	at org.junit.Assert.assertEquals(Assert.java:118)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at forcomp.AnagramsSuite.sentence$u0020anagrams$colon$u0020Linux$u0020rulez$u0020$u002810pts$u0029(AnagramsSuite.scala:90)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
</failure>
                                               </testcase><testcase classname="forcomp.AnagramsSuite" name="subtract: lard - r (10pts)" time="0.001">
                                                 
                                               </testcase><testcase classname="forcomp.AnagramsSuite" name="wordAnagrams married (2pts)" time="0.001">
                                                 
                                               </testcase><testcase classname="forcomp.AnagramsSuite" name="sentence anagrams: [] (10pts)" time="0.0">
                                                 
                                               </testcase><testcase classname="forcomp.AnagramsSuite" name="wordOccurrences: Robert (3pts)" time="0.0">
                                                 
                                               </testcase><testcase classname="forcomp.AnagramsSuite" name="combinations: abba (8pts)" time="0.001">
                                                 
                                               </testcase><testcase classname="forcomp.AnagramsSuite" name="wordOccurrences: abcd (3pts)" time="0.001">
                                                 
                                               </testcase>
                     <system-out><![CDATA[]]></system-out>
                     <system-err><![CDATA[]]></system-err>
                   </testsuite>